{"ast":null,"code":"import React,{useState}from'react';import'./TourBooking.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const TourBooking=()=>{const[destinations]=useState(['Sydney','Melbourne','Thailand','Japan','Switzerland','Maldives','Iceland','Germany','Spain','New Zealand']);const[selectedDestination,setSelectedDestination]=useState('');const[name,setName]=useState('');const[email,setEmail]=useState('');const[participants,setParticipants]=useState(1);const[message,setMessage]=useState('');const[responseStatus,setResponseStatus]=useState(null);const[selectedDate,setSelectedDate]=useState('');// Mock availability check (could later be replaced with an actual API request)\nconst checkAvailability=(destination,date)=>{// Mock condition: Assume 'Iceland' is not available\nreturn!(destination==='Iceland'&&new Date(date)<new Date());};const handleSubmit=async e=>{e.preventDefault();if(!checkAvailability(selectedDestination,selectedDate)){setMessage('Selected destination is not available on the chosen date.');setResponseStatus('error');return;}const bookingData={name,email,participants,selectedDestination,selectedDate};try{const response=await fetch('http://localhost:5000/api/bookTour',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(bookingData)});if(response.ok){setMessage('Booking successful!');setResponseStatus('success');// Clear form after successful booking\nsetName('');setEmail('');setParticipants(1);setSelectedDestination('');setSelectedDate('');}else{throw new Error('Failed to book the tour');}}catch(error){setMessage('Booking failed. Please try again.');setResponseStatus('error');}};return/*#__PURE__*/_jsxs(\"div\",{className:\"tour-booking\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Book a Tour\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"Select Destination:\",/*#__PURE__*/_jsxs(\"select\",{value:selectedDestination,onChange:e=>setSelectedDestination(e.target.value),required:true,children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"Select a destination\"}),destinations.map(destination=>/*#__PURE__*/_jsx(\"option\",{value:destination,children:destination},destination))]})]}),/*#__PURE__*/_jsxs(\"label\",{children:[\"Select Date:\",/*#__PURE__*/_jsx(\"input\",{type:\"date\",value:selectedDate,onChange:e=>setSelectedDate(e.target.value),required:true})]}),/*#__PURE__*/_jsxs(\"label\",{children:[\"Name:\",/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:name,onChange:e=>setName(e.target.value),required:true})]}),/*#__PURE__*/_jsxs(\"label\",{children:[\"Email:\",/*#__PURE__*/_jsx(\"input\",{type:\"email\",value:email,onChange:e=>setEmail(e.target.value),required:true})]}),/*#__PURE__*/_jsxs(\"label\",{children:[\"Number of Participants:\",/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:participants,onChange:e=>setParticipants(e.target.value),min:\"1\",required:true})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Book Now\"})]}),message&&/*#__PURE__*/_jsx(\"p\",{className:responseStatus==='success'?\"message success\":\"message error\",children:message})]});};export default TourBooking;","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","TourBooking","destinations","selectedDestination","setSelectedDestination","name","setName","email","setEmail","participants","setParticipants","message","setMessage","responseStatus","setResponseStatus","selectedDate","setSelectedDate","checkAvailability","destination","date","Date","handleSubmit","e","preventDefault","bookingData","response","fetch","method","headers","body","JSON","stringify","ok","Error","error","className","children","onSubmit","value","onChange","target","required","map","type","min"],"sources":["C:/Users/siddh/OneDrive/Desktop/NewGit/CSCI927/tourism-app/src/components/TourBooking.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './TourBooking.css';\r\n\r\nconst TourBooking = () => {\r\n    const [destinations] = useState([\r\n        'Sydney', 'Melbourne', 'Thailand', 'Japan', \r\n        'Switzerland', 'Maldives', 'Iceland', \r\n        'Germany', 'Spain', 'New Zealand'\r\n    ]);\r\n    const [selectedDestination, setSelectedDestination] = useState('');\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [participants, setParticipants] = useState(1);\r\n    const [message, setMessage] = useState('');\r\n    const [responseStatus, setResponseStatus] = useState(null);\r\n    const [selectedDate, setSelectedDate] = useState('');\r\n\r\n    // Mock availability check (could later be replaced with an actual API request)\r\n    const checkAvailability = (destination, date) => {\r\n        // Mock condition: Assume 'Iceland' is not available\r\n        return !(destination === 'Iceland' && new Date(date) < new Date());\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        if (!checkAvailability(selectedDestination, selectedDate)) {\r\n            setMessage('Selected destination is not available on the chosen date.');\r\n            setResponseStatus('error');\r\n            return;\r\n        }\r\n\r\n        const bookingData = { name, email, participants, selectedDestination, selectedDate };\r\n        \r\n        try {\r\n            const response = await fetch('http://localhost:5000/api/bookTour', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(bookingData),\r\n            });\r\n\r\n            if (response.ok) {\r\n                setMessage('Booking successful!');\r\n                setResponseStatus('success');\r\n                // Clear form after successful booking\r\n                setName('');\r\n                setEmail('');\r\n                setParticipants(1);\r\n                setSelectedDestination('');\r\n                setSelectedDate('');\r\n            } else {\r\n                throw new Error('Failed to book the tour');\r\n            }\r\n        } catch (error) {\r\n            setMessage('Booking failed. Please try again.');\r\n            setResponseStatus('error');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"tour-booking\">\r\n            <h2>Book a Tour</h2>\r\n            <form onSubmit={handleSubmit}>\r\n                <label>\r\n                    Select Destination:\r\n                    <select value={selectedDestination} onChange={(e) => setSelectedDestination(e.target.value)} required>\r\n                        <option value=\"\">Select a destination</option>\r\n                        {destinations.map(destination => (\r\n                            <option key={destination} value={destination}>{destination}</option>\r\n                        ))}\r\n                    </select>\r\n                </label>\r\n\r\n                <label>\r\n                    Select Date:\r\n                    <input \r\n                        type=\"date\" \r\n                        value={selectedDate} \r\n                        onChange={(e) => setSelectedDate(e.target.value)} \r\n                        required \r\n                    />\r\n                </label>\r\n\r\n                <label>\r\n                    Name:\r\n                    <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} required />\r\n                </label>\r\n\r\n                <label>\r\n                    Email:\r\n                    <input type=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} required />\r\n                </label>\r\n\r\n                <label>\r\n                    Number of Participants:\r\n                    <input type=\"number\" value={participants} onChange={(e) => setParticipants(e.target.value)} min=\"1\" required />\r\n                </label>\r\n\r\n                <button type=\"submit\">Book Now</button>\r\n            </form>\r\n\r\n            {message && (\r\n                <p className={responseStatus === 'success' ? \"message success\" : \"message error\"}>\r\n                    {message}\r\n                </p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TourBooking;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}